version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-work_management_prod}
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin123}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backend/init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-work_management_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - work-management-network

  backend:
    build: ./backend
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB:-work_management_prod}
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin123}
      DATABASE_URL: postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-admin123}@postgres:5432/${POSTGRES_DB:-work_management_prod}
      SQLALCHEMY_DATABASE_URI: postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-admin123}@postgres:5432/${POSTGRES_DB:-work_management_prod}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your_jwt_secret_key_here}
      FLASK_APP: wsgi.py
      FLASK_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        while ! pg_isready -h postgres -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-work_management_prod}; do
          sleep 2
        done &&
        echo 'Database is ready!' &&
        echo 'Creating database migrations...' &&
        if [ ! -d 'migrations' ]; then
          rm -rf migrations &&
          flask db init &&
          echo 'Initialized migrations directory'
        fi &&
        flask db stamp head &&
        flask db migrate -m 'Production migration' &&
        echo 'Created migration' &&
        echo 'Applying database migrations...' &&
        flask db upgrade &&
        echo 'Applied migrations' &&
        echo 'Initializing database...' &&
        python init_db.py &&
        echo 'Database initialized' &&
        echo 'Starting application...' &&
        gunicorn --bind 0.0.0.0:5000 'app:create_app(\"production\")'"
    networks:
      - work-management-network

  frontend:
    build: ./frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - work-management-network

networks:
  work-management-network:
    name: work-management-network

volumes:
  postgres_data_prod:
    name: work-management-postgres-prod 